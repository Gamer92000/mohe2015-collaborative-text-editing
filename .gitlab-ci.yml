variables:
  CI_IMAGE: $CI_REGISTRY_IMAGE/ci:16

workflow:
  auto_cancel:
    on_new_commit: interruptible

default:
  image:
    name: $CI_IMAGE
    docker:
      user: arch
  interruptible: true

stages:
  - prepare
  - build
  - test
  - deploy

prepare:
  stage: prepare
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - Dockerfile
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - Dockerfile
  image:
    name: quay.io/podman/stable
    docker:
      user: podman
  cache: []
  script:
    - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - podman build -t $CI_IMAGE --layers --cache-to $CI_REGISTRY_IMAGE/ci-cache --cache-from $CI_REGISTRY_IMAGE/ci-cache .
    - podman push $CI_IMAGE

build:
  stage: build
  needs:
    - job: prepare
      optional: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH
  script:
    - cd text-rdt
    - npm install
    - npm run build -- --base=./
  artifacts:
    paths:
      - text-rdt/dist

evaluation:
  needs: []
  interruptible: false
  when: manual
  script:
    - ./thesis-figures-slow-committed.sh
  artifacts:
    when: always
    paths:
      - text-rdt/jvm/figure-benchmark-results/
      - text-rdt/jvm/*.csv

latex:
  stage: test
  needs:
    - job: build
    - job: prepare
      optional: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - git config --global --add safe.directory $PWD
    - ./thesis-figures.sh
    - cd text-rdt
    - npm install
    - npm run preview &
    - sbt "textrdtJVM/testOnly text_rdt.ThesisTestSuite"
    - cd ../latex
    - make
    - cp thesis.pdf thesis.pdf.old
    - make clean
    - make
    - diff --text thesis.pdf thesis.pdf.old
    - verapdf --flavour 2b --format html ./thesis.pdf > ./report.html
  artifacts:
    when: always
    expose_as: 'Thesis'
    paths:
      - latex/thesis.pdf
      - latex/report.html

test:
  stage: test
  needs: [build]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - ./thesis-figures.sh
    - cd text-rdt
    - npm install
    - npm run preview &
    - sbt textrdtJVM/clean coverage textrdtJVM/test coverageReport
  coverage: '/Coverage was stmt=\[([^%]+)/'
  artifacts:
    when: always
    reports:
      junit: text-rdt/jvm/target/test-reports/*.xml
      coverage_report:
        coverage_format: cobertura
        path: text-rdt/jvm/target/scala-*/coverage-report/cobertura.xml
    paths:
      - text-rdt/jvm/target/scala-*/scoverage-report

test-small:
  stage: test
  needs:
    - job: prepare
      optional: true
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_BRANCH
  script:
    - cd text-rdt
    - sbt textrdtJVM/clean coverage "textrdtJVM/testOnly -- --exclude-tags=browser" textrdtJVM/coverageReport
  coverage: '/Coverage was stmt=\[([^%]+)/'
  artifacts:
    when: always
    reports:
      junit: text-rdt/jvm/target/test-reports/*.xml
      coverage_report:
        coverage_format: cobertura
        path: text-rdt/jvm/target/scala-*/coverage-report/cobertura.xml
    paths:
      - text-rdt/jvm/target/scala-*/scoverage-report

benchmark:
  stage: test
  needs:
    - job: prepare
      optional: true
    - job: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - cd text-rdt
    - sbt "textrdtJVM/clean; textrdtJVM/packageSrc; textrdtJVM/jmh:compile; textrdtJVM/jmh:assembly"
    - cd jvm
    - java -cp target/scala-*/text-rdt-assembly-0.1.0-SNAPSHOT.jar org.openjdk.jmh.Main MyRealWorldBenchmarkLarge* -p count=50 -bm AverageTime -rff test.json -rf json -prof gc -prof "async:output=jfr;dir=benchmark-results;event=cpu;alloc" -jvmArgs "-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints -XX:+LogCompilation"
    - cat test.json | jq --raw-output '.[] | "s_per_op_\(.benchmark)_\(.params.factoryConstructor)_\(.params.count) \(.primaryMetric.score)"' > metrics.txt
    - cat test.json | jq --raw-output '.[] | "gc_b_per_op_\(.benchmark)_\(.params.factoryConstructor)_\(.params.count) \(.secondaryMetrics."gc.alloc.rate.norm".score)"' >> metrics.txt
    - sort -o metrics.txt metrics.txt
    - echo "Classes=target/scala-*/text-rdt-assembly-0.1.0-SNAPSHOT.jar" > jitwatch.properties
    - echo "Sources=target/scala-*/text-rdt_3-0.1.0-SNAPSHOT-sources.jar" >> jitwatch.properties
    - ls benchmark-results/ | xargs -I {} bash -c "cd benchmark-results/{} && java -jar /opt/async-profiler/lib/converter.jar jfr2flame jfr-cpu.jfr cpu.html"
    - ls benchmark-results/ | xargs -I {} bash -c "cd benchmark-results/{} && java -jar /opt/async-profiler/lib/converter.jar jfr2flame --alloc jfr-cpu.jfr alloc.html"
  artifacts:
    when: always
    reports:
      metrics: text-rdt/jvm/metrics.txt
    paths:
      - text-rdt/jvm/target/scala-*/text-rdt_3-0.1.0-SNAPSHOT-sources.jar
      - text-rdt/jvm/target/scala-*/text-rdt-assembly-0.1.0-SNAPSHOT.jar
      - text-rdt/jvm/test.json
      - text-rdt/jvm/metrics.txt
      - text-rdt/jvm/hotspot_pid*.log
      - text-rdt/jvm/benchmark-results
      - text-rdt/jvm/jitwatch.properties

pages:
  stage: deploy
  needs:
    - job: build
    - job: test
      optional: true
  environment: production
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH
      when: manual
  script:
    - echo "The site will be deployed to $CI_PAGES_URL"
    - cp -r text-rdt/dist public
    - echo "/* /index.html 200" > public/_redirects
  artifacts:
    paths:
      - public
